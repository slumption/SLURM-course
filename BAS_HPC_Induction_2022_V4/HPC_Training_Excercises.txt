## Rough notes, excercises to add or amend in slides

Practical 1: Setting up X2GO

##############################################################################

Pratical 2: Transfer a file with sftp or rsync

##############################################################################

Practical 3: Login to a workstation

##############################################################################

Practical 4: Environment variables

What are they?

- Environment variables set the behavior of the environment
- They can affect the programs that are executed in the environment
- You can add or overide settings 

Modify an environment variable

1. Connect via SSH, putty or X2go to a workstation:

In my example I connect to bslwsdev1

2. In your terminal:

type: echo $PATH

expected out: /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/puppetlabs/bin

These bin directories are where our operating system is looking for programs it can execute i.e matlab

Type: matlab
Expected output: matlab: command not found

Its not found as its not installed as part of our operating system. We can however load a module and modify our environment to find matlab.

3. Check no modules are loaded

type: module list
expected output: No Modulefiles Currently Loaded

If you see any modules listed type: module purge

4. Load a module

module load hpc/matlab/R2021a

5. Confirm that the dirctory that contains matlab is now appended to your path
type: echo $PATH
execpted output: /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/puppetlabs/bin:/packages/matlab/R2018b/bin

Note that the matlab bin directory has been added to our path. If you type matl and hit tab the command matlab will now autocomplete.

In the example you have modified your environment so that you can run an application.

#######################################################################################################################################

Practical 5: Use matlab on a workstation interactively

Connect to a workstation using X2GO to start a Mate desktop session

1. Open a terminal
2. Load matlab:

module purge
module load hpc/matlab/R2021a

3. Type matlab to start the application
4. Click new script and enter:

x = 0:0.05:5;
y = sin(x.^2);
figure
plot(x,y)
f = gcf;
exportgraphics(f,'matlabplot.png')

5. Save it as: matlabplot.m
6. Check that your matlab script runs!

Click the run icon. If you have saved your script in a subfolder you will be prompted to let Matlab either change into the folder or append it to the path. Choose append to path.

7. If successful you will see a plot generated by matlab.

########################################################################################################################################## 

Interactive and Non Interactive jobs

Workstations allow us to run interactive sessions. 

Interactive:

- We can stop and start programs by typing commands 
- In an X20go session we can use the mouse and click within a desktop environment to open and close programs
- We can click on menus, type in order to enter our data, we can open our files
- Its almost the same as your laptop the main difference is the desktop is remote to you and more powerful

As you progess with your research its likely that you'll need to run code on a cluster. You'll need to understand how to setup non interactive jobs to do so.

Non Interactive:

- Your workflow or pipeline is in a file (shell script / slurm job script)
- The job runs without interaction from the end user
- At the end of the run output is produced and it is possible to log errors to see what happened during the run

##########################################################################################################################################

Practical 6: User matlab from the command line

The cluster job won't be launching the matlab graphical user interface. What we need to do is run the matlab script without interaction to generate a PNG file of the plot. First we need should check if we are able to launch matlab without the graphical user interface and generate a PNG file as an output.

1. Open a terminal
2. Change into the directory where you saved matlabplot.m (hint: cd <dirname>)
3. Launch the matlab script with no graphical interface:

type: matlab -nodesktop -nosplash -nodisplay -r "matlabplot; exit;"

4. Once this completes type ls and check that the file matabplot.png exists
5. You can view the png file by using 'display matlabplot.png'

Notes: 

- Don't include the .m when referencing the matlab script
- The MATLAB script that you run should have an exit command in it. Otherwise when it completes, MATLAB will remain active but idle until all the requested walltime for your job has elapsed.
- As best practise we recommend appending ;exit ;" after the matlab script to make sure we are expclit about exiting when the job completes

##########################################################################################################################################

Practical 7: Run a matlab job on the cluster

We now have the ability to load a module and generate a plot from the command line using matlab. The next step is to use a SLURM job to run our script on the cluster.

Lets look at a simple job script to see how we do this:

#!/bin/bash
#
#SBATCH --output=/data/hpcdata/users/pasump/jobs/matlab.%j.%N.out
#SBATCH --error=/data/hpcdata/users/pasump/jobs/matlab.%j.%N.err
#SBATCH -J matlab
#SBATCH --mem=4gb
#SBATCH --time=00:10:00
#SBATCH --mail-type=begin,end,fail,requeue
#SBATCH --mail-user=pasump@bas.ac.uk
#SBATCH --partition=short
#SBATCH --account=short   
source /etc/profile.d/modules.sh

module purge
module load hpc/matlab/R2021a

SCRIPTNAME=/data/hpcdata/users/pasump/jobs/matlabplot.m
matlab -nodesktop -nosplash -nodisplay -r "try run('${SCRIPTNAME}'); catch exit; end; exit"

- Each of the #SBATCH directives are interpreted by SLURM to setup your job

- In my example I set:
	1. A job error and job ouput file. %j appends the job number to the files, %N the nodename. 
	2. -J sets my jobname, I will see this when I check the queue
	3. --mem sets the amount of RAM I require per core
	4. --time sets the maxmimum runtime of my job, the format is days, hours and minutes
	5. --mail we set when SLURM should email us, in my example I ask to for an email when my job starts, ends, fails or gets requeued*
	6. --mail-user this should be your @bas email address. 
	7. --partition My job only needs 10 mins so I an using the short run partition
	8 --acount The account needs to have access to the partion, in our case the name matches the partition (short for short, medium for medium etc)
	9. The source command sets up our module environment by reading a file that contains some settings
	10. To be sure we are running in a clean environment we purge any loaded modules
	11. We then add any module load commands for modules we want our job to load
	12. The have user a variable SCRIPTNAME to set the full path to my matlab script
	13. The final line is the program we wish to run and some options we wish to send to it such as the matlab scriptname an exit command.
		
*requeing can cause problems such as data being overwritten.

##########################################################################################################################################

Practical 8: Conda environments

Making conda environments

## Need to check that the service desk solution works
## Use the solution to setup a basic env
## Invoke from a Workstation

##########################################################################################################################################

Practical 9: Using Conda envs with SLURM

## Wrap previous venv in a Slurm script and submit as a single core job




 





